{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EmpService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:5262/api/Employees'; // üîÅ Update port as per your backend\n  }\n  // üîπ Get all skills for dropdown\n  getSkills() {\n    return this.http.get(`${this.baseUrl}/skills`);\n  }\n  // üîπ Add employee with selected skills\n  addEmployee(employee) {\n    return this.http.post(this.baseUrl, employee);\n  }\n  // üîπ Get employee by ID (with skill names)\n  getEmployee(id) {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n  // Get all employees with skill names\n  getAllEmployees() {\n    return this.http.get(this.baseUrl);\n  }\n  // Update employee by ID\n  updateEmployee(id, employee) {\n    return this.http.put(`${this.baseUrl}/${id}`, employee);\n  }\n  // Delete employee by ID\n  deleteEmployee(id) {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n  static {\n    this.…µfac = function EmpService_Factory(t) {\n      return new (t || EmpService)(i0.…µ…µinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: EmpService,\n      factory: EmpService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["EmpService","constructor","http","baseUrl","getSkills","get","addEmployee","employee","post","getEmployee","id","getAllEmployees","updateEmployee","put","deleteEmployee","delete","i0","…µ…µinject","i1","HttpClient","factory","…µfac","providedIn"],"sources":["C:\\Users\\HomePC\\Desktop\\New folder\\Client\\src\\app\\services\\emp.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n// Interface for Skill dropdown\nexport interface Skill {\n  skillID: string;\n  skillName: string;\n}\n\n// DTO used when posting employee data\nexport interface EmployeeDto {\n  employeeID: string;\n  name: string;\n  email: string;\n  skillIDs: string[]; // Skill IDs selected by user\n}\n\n// View DTO used to show employee data with skill names\nexport interface EmployeeViewDto {\n  employeeID: string;\n  name: string;\n  email: string;\n  skills: string[]; // Skill names\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmpService {\n\n  private baseUrl = 'http://localhost:5262/api/Employees'; // üîÅ Update port as per your backend\n\n  constructor(private http: HttpClient) {}\n\n  // üîπ Get all skills for dropdown\n  getSkills(): Observable<Skill[]> {\n    return this.http.get<Skill[]>(`${this.baseUrl}/skills`);\n  }\n\n  // üîπ Add employee with selected skills\n  addEmployee(employee: EmployeeDto): Observable<EmployeeViewDto> {\n    return this.http.post<EmployeeViewDto>(this.baseUrl, employee);\n  }\n\n  // üîπ Get employee by ID (with skill names)\n  getEmployee(id: string): Observable<EmployeeViewDto> {\n    return this.http.get<EmployeeViewDto>(`${this.baseUrl}/${id}`);\n  }\n\n// Get all employees with skill names\ngetAllEmployees(): Observable<EmployeeViewDto[]> {\n  return this.http.get<EmployeeViewDto[]>(this.baseUrl);\n}\n\n// Update employee by ID\nupdateEmployee(id: string, employee: EmployeeDto): Observable<any> {\n  return this.http.put(`${this.baseUrl}/${id}`, employee);\n}\n\n// Delete employee by ID\ndeleteEmployee(id: string): Observable<any> {\n  return this.http.delete(`${this.baseUrl}/${id}`);\n}\n}\n"],"mappings":";;AA6BA,OAAM,MAAOA,UAAU;EAIrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,qCAAqC,CAAC,CAAC;EAElB;EAEvC;EACAC,SAASA,CAAA;IACP,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAU,GAAG,IAAI,CAACF,OAAO,SAAS,CAAC;EACzD;EAEA;EACAG,WAAWA,CAACC,QAAqB;IAC/B,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAkB,IAAI,CAACL,OAAO,EAAEI,QAAQ,CAAC;EAChE;EAEA;EACAE,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAkB,GAAG,IAAI,CAACF,OAAO,IAAIO,EAAE,EAAE,CAAC;EAChE;EAEF;EACAC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACT,IAAI,CAACG,GAAG,CAAoB,IAAI,CAACF,OAAO,CAAC;EACvD;EAEA;EACAS,cAAcA,CAACF,EAAU,EAAEH,QAAqB;IAC9C,OAAO,IAAI,CAACL,IAAI,CAACW,GAAG,CAAC,GAAG,IAAI,CAACV,OAAO,IAAIO,EAAE,EAAE,EAAEH,QAAQ,CAAC;EACzD;EAEA;EACAO,cAAcA,CAACJ,EAAU;IACvB,OAAO,IAAI,CAACR,IAAI,CAACa,MAAM,CAAC,GAAG,IAAI,CAACZ,OAAO,IAAIO,EAAE,EAAE,CAAC;EAClD;;;uBAlCaV,UAAU,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAVnB,UAAU;MAAAoB,OAAA,EAAVpB,UAAU,CAAAqB,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}